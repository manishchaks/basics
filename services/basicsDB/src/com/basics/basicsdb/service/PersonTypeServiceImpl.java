/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.basics.basicsdb.*;


/**
 * ServiceImpl object for domain model class PersonType.
 * @see com.basics.basicsdb.PersonType
 */
@Service("basicsDB.PersonTypeService")
public class PersonTypeServiceImpl implements PersonTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PersonTypeServiceImpl.class);

    @Autowired
    @Qualifier("basicsDB.PersonTypeDao")
    private WMGenericDao<PersonType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonType, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "basicsDBTransactionManager")
     public Page<PersonType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "basicsDBTransactionManager")
    @Override
    public PersonType create(PersonType persontype) {
        LOGGER.debug("Creating a new persontype with information: {}" , persontype);
        return this.wmGenericDao.create(persontype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "basicsDBTransactionManager")
    @Override
    public PersonType delete(Integer persontypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting persontype with id: {}" , persontypeId);
        PersonType deleted = this.wmGenericDao.findById(persontypeId);
        if (deleted == null) {
            LOGGER.debug("No persontype found with id: {}" , persontypeId);
            throw new EntityNotFoundException(String.valueOf(persontypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public Page<PersonType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all persontypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public Page<PersonType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all persontypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public PersonType findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding persontype by id: {}" , id);
        PersonType persontype=this.wmGenericDao.findById(id);
        if(persontype==null){
            LOGGER.debug("No persontype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return persontype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "basicsDBTransactionManager")
    @Override
    public PersonType update(PersonType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating persontype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


