/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.basics.basicsdb.*;


/**
 * ServiceImpl object for domain model class Type.
 * @see com.basics.basicsdb.Type
 */
@Service("basicsDB.TypeService")
public class TypeServiceImpl implements TypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeServiceImpl.class);

    @Autowired
    @Qualifier("basicsDB.TypeDao")
    private WMGenericDao<Type, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Type, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "basicsDBTransactionManager")
     public Page<Type> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "basicsDBTransactionManager")
    @Override
    public Type create(Type type) {
        LOGGER.debug("Creating a new type with information: {}" , type);
        return this.wmGenericDao.create(type);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "basicsDBTransactionManager")
    @Override
    public Type delete(Integer typeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting type with id: {}" , typeId);
        Type deleted = this.wmGenericDao.findById(typeId);
        if (deleted == null) {
            LOGGER.debug("No type found with id: {}" , typeId);
            throw new EntityNotFoundException(String.valueOf(typeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public Page<Type> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all types");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public Page<Type> findAll(Pageable pageable) {
        LOGGER.debug("Finding all types");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public Type findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding type by id: {}" , id);
        Type type=this.wmGenericDao.findById(id);
        if(type==null){
            LOGGER.debug("No type found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return type;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "basicsDBTransactionManager")
    @Override
    public Type update(Type updated) throws EntityNotFoundException {
        LOGGER.debug("Updating type with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "basicsDBTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


