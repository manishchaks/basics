/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.basics.basicsdb.*;

/**
 * Service object for domain model class PersonType.
 * @see com.basics.basicsdb.PersonType
 */

public interface PersonTypeService {
   /**
	 * Creates a new persontype.
	 * 
	 * @param created
	 *            The information of the created persontype.
	 * @return The created persontype.
	 */
	public PersonType create(PersonType created);

	/**
	 * Deletes a persontype.
	 * 
	 * @param persontypeId
	 *            The id of the deleted persontype.
	 * @return The deleted persontype.
	 * @throws EntityNotFoundException
	 *             if no persontype is found with the given id.
	 */
	public PersonType delete(Integer persontypeId) throws EntityNotFoundException;

	/**
	 * Finds all persontypes.
	 * 
	 * @return A list of persontypes.
	 */
	public Page<PersonType> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PersonType> findAll(Pageable pageable);
	
	/**
	 * Finds persontype by id.
	 * 
	 * @param id
	 *            The id of the wanted persontype.
	 * @return The found persontype. If no persontype is found, this method returns
	 *         null.
	 */
	public PersonType findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a persontype.
	 * 
	 * @param updated
	 *            The information of the updated persontype.
	 * @return The updated persontype.
	 * @throws EntityNotFoundException
	 *             if no persontype is found with given id.
	 */
	public PersonType update(PersonType updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the persontypes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the persontype.
	 */

	public long countAll();


    public Page<PersonType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

