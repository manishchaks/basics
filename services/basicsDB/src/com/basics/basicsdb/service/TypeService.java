/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.basics.basicsdb.*;

/**
 * Service object for domain model class Type.
 * @see com.basics.basicsdb.Type
 */

public interface TypeService {
   /**
	 * Creates a new type.
	 * 
	 * @param created
	 *            The information of the created type.
	 * @return The created type.
	 */
	public Type create(Type created);

	/**
	 * Deletes a type.
	 * 
	 * @param typeId
	 *            The id of the deleted type.
	 * @return The deleted type.
	 * @throws EntityNotFoundException
	 *             if no type is found with the given id.
	 */
	public Type delete(Integer typeId) throws EntityNotFoundException;

	/**
	 * Finds all types.
	 * 
	 * @return A list of types.
	 */
	public Page<Type> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Type> findAll(Pageable pageable);
	
	/**
	 * Finds type by id.
	 * 
	 * @param id
	 *            The id of the wanted type.
	 * @return The found type. If no type is found, this method returns
	 *         null.
	 */
	public Type findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a type.
	 * 
	 * @param updated
	 *            The information of the updated type.
	 * @return The updated type.
	 * @throws EntityNotFoundException
	 *             if no type is found with given id.
	 */
	public Type update(Type updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the types in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the type.
	 */

	public long countAll();


    public Page<Type> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

