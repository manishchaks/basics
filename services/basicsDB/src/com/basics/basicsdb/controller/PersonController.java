/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.basics.basicsdb.service.PersonService;
import com.basics.basicsdb.service.PersonTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.basics.basicsdb.*;
import com.basics.basicsdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Person.
 * @see com.basics.basicsdb.Person
 */
@RestController(value = "BasicsDB.PersonController")
@RequestMapping("/basicsDB/Person")
@Api(description = "Exposes APIs to work with Person resource.", value = "PersonController")
public class PersonController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonController.class);

    @Autowired
    @Qualifier("basicsDB.PersonService")
    private PersonService personService;

    @Autowired
    @Qualifier("basicsDB.PersonTypeService")
    private PersonTypeService personTypeService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Person instances matching the search criteria.")
    public Page<Person> findPersons(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Persons list");
        return personService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Person instances.")
    public Page<Person> getPersons(Pageable pageable) {
        LOGGER.debug("Rendering Persons list");
        return personService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/personTypes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the personTypes instance associated with the given id.")
    public Page<PersonType> findAssociatedpersonTypes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated personTypes");
        return personTypeService.findAssociatedValues(id, "person", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPersonService(PersonService service) {
        this.personService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Person instance.")
    public Person createPerson(@RequestBody Person instance) {
        LOGGER.debug("Create Person with information: {}", instance);
        instance = personService.create(instance);
        LOGGER.debug("Created Person with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Person instances.")
    public Long countAllPersons() {
        LOGGER.debug("counting Persons");
        Long count = personService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Person instance associated with the given id.")
    public Person getPerson(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Person with id: {}", id);
        Person instance = personService.findById(id);
        LOGGER.debug("Person details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Person instance associated with the given id.")
    public Person editPerson(@PathVariable(value = "id") Integer id, @RequestBody Person instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Person with id: {}", instance.getId());
        instance.setId(id);
        instance = personService.update(instance);
        LOGGER.debug("Person details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Person instance associated with the given id.")
    public boolean deletePerson(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Person with id: {}", id);
        Person deleted = personService.delete(id);
        return deleted != null;
    }
}
