/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.basics.basicsdb.service.PersonTypeService;
import com.basics.basicsdb.service.TypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.basics.basicsdb.*;
import com.basics.basicsdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Type.
 * @see com.basics.basicsdb.Type
 */
@RestController(value = "BasicsDB.TypeController")
@RequestMapping("/basicsDB/Type")
@Api(description = "Exposes APIs to work with Type resource.", value = "TypeController")
public class TypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeController.class);

    @Autowired
    @Qualifier("basicsDB.TypeService")
    private TypeService typeService;

    @Autowired
    @Qualifier("basicsDB.PersonTypeService")
    private PersonTypeService personTypeService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Type instances matching the search criteria.")
    public Page<Type> findTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Types list");
        return typeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Type instances.")
    public Page<Type> getTypes(Pageable pageable) {
        LOGGER.debug("Rendering Types list");
        return typeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/personTypes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the personTypes instance associated with the given id.")
    public Page<PersonType> findAssociatedpersonTypes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated personTypes");
        return personTypeService.findAssociatedValues(id, "type", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTypeService(TypeService service) {
        this.typeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Type instance.")
    public Type createType(@RequestBody Type instance) {
        LOGGER.debug("Create Type with information: {}", instance);
        instance = typeService.create(instance);
        LOGGER.debug("Created Type with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Type instances.")
    public Long countAllTypes() {
        LOGGER.debug("counting Types");
        Long count = typeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Type instance associated with the given id.")
    public Type getType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Type with id: {}", id);
        Type instance = typeService.findById(id);
        LOGGER.debug("Type details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Type instance associated with the given id.")
    public Type editType(@PathVariable(value = "id") Integer id, @RequestBody Type instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Type with id: {}", instance.getId());
        instance.setId(id);
        instance = typeService.update(instance);
        LOGGER.debug("Type details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Type instance associated with the given id.")
    public boolean deleteType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Type with id: {}", id);
        Type deleted = typeService.delete(id);
        return deleted != null;
    }
}
