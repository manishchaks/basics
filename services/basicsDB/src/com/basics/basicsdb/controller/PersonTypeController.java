/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/
package com.basics.basicsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.basics.basicsdb.service.PersonTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.basics.basicsdb.*;
import com.basics.basicsdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PersonType.
 * @see com.basics.basicsdb.PersonType
 */
@RestController(value = "BasicsDB.PersonTypeController")
@RequestMapping("/basicsDB/PersonType")
@Api(description = "Exposes APIs to work with PersonType resource.", value = "PersonTypeController")
public class PersonTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonTypeController.class);

    @Autowired
    @Qualifier("basicsDB.PersonTypeService")
    private PersonTypeService personTypeService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PersonType instances matching the search criteria.")
    public Page<PersonType> findPersonTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PersonTypes list");
        return personTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PersonType instances.")
    public Page<PersonType> getPersonTypes(Pageable pageable) {
        LOGGER.debug("Rendering PersonTypes list");
        return personTypeService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPersonTypeService(PersonTypeService service) {
        this.personTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PersonType instance.")
    public PersonType createPersonType(@RequestBody PersonType instance) {
        LOGGER.debug("Create PersonType with information: {}", instance);
        instance = personTypeService.create(instance);
        LOGGER.debug("Created PersonType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PersonType instances.")
    public Long countAllPersonTypes() {
        LOGGER.debug("counting PersonTypes");
        Long count = personTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PersonType instance associated with the given id.")
    public PersonType getPersonType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PersonType with id: {}", id);
        PersonType instance = personTypeService.findById(id);
        LOGGER.debug("PersonType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PersonType instance associated with the given id.")
    public PersonType editPersonType(@PathVariable(value = "id") Integer id, @RequestBody PersonType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing PersonType with id: {}", instance.getId());
        instance.setId(id);
        instance = personTypeService.update(instance);
        LOGGER.debug("PersonType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PersonType instance associated with the given id.")
    public boolean deletePersonType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PersonType with id: {}", id);
        PersonType deleted = personTypeService.delete(id);
        return deleted != null;
    }
}
