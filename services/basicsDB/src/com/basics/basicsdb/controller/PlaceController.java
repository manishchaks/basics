/*Copyright (c) 2016-2017 unionsystems.com.au All Rights Reserved.
 This software is the confidential and proprietary information of unionsystems.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with unionsystems.com.au*/

package com.basics.basicsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.basics.basicsdb.service.PersonService;
import com.basics.basicsdb.service.PlaceService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.basics.basicsdb.*;
import com.basics.basicsdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Place.
 * @see com.basics.basicsdb.Place
 */
@RestController(value = "BasicsDB.PlaceController")
@RequestMapping("/basicsDB/Place")
@Api(description = "Exposes APIs to work with Place resource.", value = "PlaceController")
public class PlaceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceController.class);

    @Autowired
    @Qualifier("basicsDB.PlaceService")
    private PlaceService placeService;

    @Autowired
    @Qualifier("basicsDB.PersonService")
    private PersonService personService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Place instances matching the search criteria.")
    public Page<Place> findPlaces(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Places list");
        return placeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Place instances.")
    public Page<Place> getPlaces(Pageable pageable) {
        LOGGER.debug("Rendering Places list");
        return placeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/persons", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the persons instance associated with the given id.")
    public Page<Person> findAssociatedpersons(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated persons");
        return personService.findAssociatedValues(id, "place", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPlaceService(PlaceService service) {
        this.placeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Place instance.")
    public Place createPlace(@RequestBody Place instance) {
        LOGGER.debug("Create Place with information: {}", instance);
        instance = placeService.create(instance);
        LOGGER.debug("Created Place with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Place instances.")
    public Long countAllPlaces() {
        LOGGER.debug("counting Places");
        Long count = placeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Place instance associated with the given id.")
    public Place getPlace(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Place with id: {}", id);
        Place instance = placeService.findById(id);
        LOGGER.debug("Place details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Place instance associated with the given id.")
    public Place editPlace(@PathVariable(value = "id") Integer id, @RequestBody Place instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Place with id: {}", instance.getId());
        instance.setId(id);
        instance = placeService.update(instance);
        LOGGER.debug("Place details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Place instance associated with the given id.")
    public boolean deletePlace(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Place with id: {}", id);
        Place deleted = placeService.delete(id);
        return deleted != null;
    }
}
